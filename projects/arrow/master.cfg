# -*- python -*-
# ex: set filetype=python:

# Copyright 2019 RStudio, Inc.
# All rights reserved.
#
# Use of this source code is governed by a BSD 2-Clause
# license that can be found in the LICENSE_BSD file.

from dotenv import load_dotenv
from buildbot.plugins import util

from ursabot.changes import ChangeFilter, GitPoller, GitHubPullrequestPoller
from ursabot.configs import ProjectConfig, MasterConfig
from ursabot.reporters import GitHubStatusPush, GitHubCommentPush
from ursabot.schedulers import AnyBranchScheduler, ForceScheduler
from ursabot.utils import AnyOf, Glob
from ursabot.workers import local_test_workers

from arrow.docker import images
from arrow.commands import ursabot as ursabot_command
from arrow.formatters import (BenchmarkCommentFormatter,
                              CrossbowCommentFormatter)
from arrow.builders import (CrossbowTrigger, CppTest, CppCudaTest,
                            CppBenchmark, PythonTest, CppCondaTest,
                            PythonCondaTest, PythonCudaTest, JavaTest,
                            GoTest, RustTest, JSTest, RTest, RCondaTest)


load_dotenv()

########################## GLOBAL CONFIGURATIONS ##############################
# This configuration file can be loaded from another one, and the variables
# below can be injected from outside as module level locals (thus as globals).
global_or = globals().get

# project should be in `owner/repo` format, because of certain reporters
project = global_or('project', 'apache/arrow')
repo = global_or('repo', 'https://github.com/apache/arrow')

with_pollers = global_or('with_pollers', False)
with_reporters = global_or('with_reporters', False)

# Github token used for pushing status changes, have to provide repo:status
# scope for the token and must have write access to the arrow repository.
# Recommented scopes: public_repo, repo:status. Multiple tokens can be provided
# to increate the rate limit. By default 5000 API requests can be made with a
# single token, but the rotator will switch after reaching 1000 remaining rate
# limit.
poller_token = global_or('poller_token', None)
status_reporter_tokens = global_or('status_reporter_tokens', [])
comment_reporter_tokens = global_or('comment_reporter_tokens', [])

################################ WORKERS ######################################
# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password. The same
# worker name and password must be configured on the worker.

workers = global_or('workers', local_test_workers())

print('Available workers:')
for worker in workers:
    print(f' - {worker}')

################################ BUILDERS #####################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.

crossbow_builders = CrossbowTrigger.combine_with(workers, images)

cpp_benchmarks = CppBenchmark.combine_with(workers, images)
cpp_tests = (
    CppTest.combine_with(workers, images) +
    CppCondaTest.combine_with(workers, images) +
    CppCudaTest.combine_with(workers, images)
)
r_tests = (
    RTest.combine_with(workers, images) +
    RCondaTest.combine_with(workers, images)
)
python_tests = (
    PythonTest.combine_with(workers, images) +
    PythonCondaTest.combine_with(workers, images) +
    PythonCudaTest.combine_with(workers, images)
)
go_tests = GoTest.combine_with(workers, images)
js_tests = JSTest.combine_with(workers, images)
java_tests = JavaTest.combine_with(workers, images)
rust_tests = RustTest.combine_with(workers, images)

arrow_benchmarks = (
    cpp_benchmarks
)
arrow_tests = (
    cpp_tests +
    r_tests +
    python_tests +
    go_tests +
    js_tests +
    java_tests +
    rust_tests
)

arrow_builders = arrow_tests + arrow_benchmarks
all_builders = arrow_builders + crossbow_builders

print('Enabled builders:')
for builder in all_builders:
    print(f' - {builder.name}')

################################ SCHEDULERS ###################################
# Configure the Schedulers, which decide how to react to incoming changes.
# For more see http://docs.buildbot.net/latest/full.html#scheduling-builds


def scheduler_for(builders, name, files):
    """Small factory to reduce boilerplate"""

    # trigger on-demand on github comment requests
    on_comment = ChangeFilter(
        project=project,
        category='comment',
        properties={'command': 'build'},
        files=files
    )
    # trigger builds on push, tag or pull request events
    on_push = ChangeFilter(
        project=project,
        # see docstring of ursabot.hooks.GithubHook
        category=AnyOf(None, 'tag', 'pull'),
        files=files
    )

    return AnyBranchScheduler(
        name=name,
        treeStableTimer=None,
        builders=builders,
        change_filter=AnyOf(on_push, on_comment)
    )


schedulers = [
    # generic schedulers for the arrow implementations
    scheduler_for(
        name='Arrow C++',
        builders=cpp_tests,
        files=Glob('cpp/*')
    ),
    scheduler_for(
        name='Arrow R',
        builders=r_tests,
        files=AnyOf(
            Glob('cpp/*'),
            Glob('r/*')
        )
    ),
    scheduler_for(
        name='Arrow Python',
        builders=python_tests,
        files=AnyOf(
            Glob('cpp/*'),
            Glob('python/*')
        )
    ),
    scheduler_for(
        name='Arrow Go',
        builders=go_tests,
        files=Glob('go/*')
    ),
    scheduler_for(
        name='Arrow JS',
        builders=js_tests,
        files=Glob('js/*')
    ),
    scheduler_for(
        name='Arrow Java',
        builders=java_tests,
        files=Glob('java/*')
    ),
    scheduler_for(
        name='Arrow Rust',
        builders=rust_tests,
        files=Glob('rust/*')
    ),
    # miscellaneous schedulers for other tools like archery and crossbow
    AnyBranchScheduler(
        name='Arrow Benchmark',
        change_filter=ChangeFilter(
            # benchmarks are not triggered on every commit of every pull
            # request, see docstring of ursabot.hooks.GithubHook
            project=project,
            category='comment',
            properties={'command': 'benchmark'},
            files=Glob('cpp/*')
        ),
        treeStableTimer=None,
        builders=arrow_benchmarks
    ),
    AnyBranchScheduler(
        name='Crossbow Trigger',
        change_filter=ChangeFilter(
            project=project,
            category='comment',
            properties={'command': 'crossbow'}
        ),
        treeStableTimer=None,
        builders=crossbow_builders
    ),
    ForceScheduler(
        name='ArrowForce',
        project=project,
        repository=repo,
        builders=all_builders
    )
]

################################ REPORTERS ####################################
# There are multiple ways to present build status to various places e.g.
# to github as status push, reviews and/or comments.

if with_reporters:
    reporters = [
        GitHubStatusPush(
            name='ArrowStatusPush',
            tokens=status_reporter_tokens,
            builders=arrow_builders,
            debug=False,
            verbose=True,
            verify=True
        ),
        GitHubCommentPush(
            name='BenchmarkCommentPush',
            tokens=comment_reporter_tokens,
            formatter=BenchmarkCommentFormatter(),
            builders=arrow_benchmarks,
            report_on={'failure', 'exception', 'cancelled', 'success'},
            debug=False,
            verbose=True,
            verify=True
        ),
        GitHubCommentPush(
            name='CrossbowCommentPush',
            tokens=comment_reporter_tokens,
            formatter=CrossbowCommentFormatter(
                crossbow_repo=util.Property(
                    'crossbow_repo',
                    default='ursa-labs/crossbow'
                )
            ),
            builders=crossbow_builders,
            report_on={'failure', 'exception', 'cancelled', 'success'},
            debug=False,
            verbose=True,
            verify=True
        )
    ]
else:
    reporters = []

################################ POLLERS ####################################
# Git and Pull request pollers are required only if no hooks are defined.
# Pollers should be set up if the change hooks are not configured for the
# arrow repository.

if with_pollers:
    pollers = [
        GitPoller(
            project=project,
            repourl=repo,
            branch='master',
            pollInterval=180
        ),
        GitHubPullrequestPoller(
            project=project,
            branches=['master'],
            pollInterval=180,
            magic_link=True,
            token=util.Interpolate('%(secret:ursabot/github_token)s')
        )
    ]
else:
    pollers = []

################################ PROJECT CONFIG ###############################
# ProjectConfig is a thin layer around the project specific components.
# It lets other buildmaster configurations to reuse existing configurations,
# and it also makes possible to maintain the project relevant buildbot code
# in the project's own codebase.

commands = [
    ursabot_command
]

arrow = ProjectConfig(
    name=project,
    repo=repo,
    images=images,
    workers=workers,
    pollers=pollers,
    commands=commands,
    builders=all_builders,
    schedulers=schedulers,
    reporters=reporters
)

############################# BUILDMASTER CONFIG ##############################
# MasterConfig is the object that the ursabot pays attention to. The following
# master is only suitable for testing, the production configuration for
# (for ci.ursalabs.org) is maintained in a different master.cfg
# - `ursabot checkconfig` loads and validates it without actually
#   running the services
# - `ursabot start|stop|restart` also loads this dictionary, indirectly
#   through buildbot.tac

master = MasterConfig(
    # The 'title' string will appear at the top of this buildbot installation's
    # home pages (linked to the 'titleURL').
    title='Apache Arrow Testing',
    # The 'buildbotURL' string should point to the location where the
    # buildbot's internal web server is visible. This typically uses the port
    # number set in the 'webui_port' entry below, but with an
    # externally-visible host name which the buildbot cannot figure out without
    # some help.
    url='http://localhost:8100/',
    projects=[
        arrow
    ]
)
