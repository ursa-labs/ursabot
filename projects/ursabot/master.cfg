# -*- python -*-
# ex: set filetype=python:

# Copyright 2019 RStudio, Inc.
# All rights reserved.
#
# Use of this source code is governed by a BSD 2-Clause
# license that can be found in the LICENSE_BSD file.

import os
from pathlib import Path

from dotenv import load_dotenv
from buildbot.plugins import util
from ursabot.builders import DockerBuilder
from ursabot.changes import ChangeFilter, GitPoller, GitHubPullrequestPoller
from ursabot.configs import ProjectConfig, MasterConfig
from ursabot.docker import DockerImage, ADD, RUN, apt, pip, worker_image_for
from ursabot.reporters import GitHubStatusPush
from ursabot.schedulers import AnyBranchScheduler, ForceScheduler
from ursabot.steps import ShellCommand, PyTest, Pip, GitHub, Mkdir
from ursabot.utils import Platform, where
from ursabot.workers import local_test_workers


load_dotenv()

########################## GLOBAL CONFIGURATIONS ##############################
# This configuration file can be loaded from another one, and the variables
# below can be injected from outside as module level locals (thus as globals).
global_or = globals().get

# project should be in `owner/repo` format, because of certain reporters
project = global_or('project', 'ursa-labs/ursabot')
repo = global_or('repo', 'https://github.com/ursa-labs/ursabot')
workers = global_or('workers', local_test_workers())

with_pollers = global_or('with_pollers', False)
with_reporters = global_or('with_reporters', False)

poller_token = global_or('poller_token', None)
status_reporter_tokens = global_or('status_reporter_tokens', [])

############################## DOCKER IMAGES ##################################
# There is a small docker utility in ursabot.docker module to define
# hierachical images. It uses a DSL implemented in python instead of plain
# Dockerfiles. Additionally it plays nicely with the DockerLatentWorker and
# the DockerBuilder abstractions. The DockerBuilder can specify which
# DockerImage(s) it requires to run the build(s).
# For more see https://github.com/ursa-labs/ursabot#define-docker-images

pkg_root = Path(__file__).parents[2]
ursabot_image = DockerImage(
    name='ursabot',
    title='Ursabot Python 3.7',
    org='ursalab',
    base='python:3.7',
    platform=Platform(
        arch='amd64',
        distro='debian',
        version='9'
    ),
    steps=[
        ADD(pkg_root / 'requirements.txt'),
        RUN(pip(files=['requirements.txt'])),
        RUN(apt('pass'))  # password-store required to check the prod config
    ]
)
worker_image = worker_image_for(ursabot_image)
images = [ursabot_image, worker_image]

################################ BUILDERS #####################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.


class UrsabotTest(DockerBuilder):
    tags = ['ursabot']
    steps = [
        GitHub(
            name='Clone Ursabot',
            repourl=util.Property('repository'),
            workdir='.',
            mode='full'
        ),
        Pip(
            args=['install', '-e', '.'],
            workdir='.'
        ),
        PyTest(
            args=['-v', 'ursabot'],
            name='PyTest Ursabot utilities',
            workdir='.'
        ),
        PyTest(
            args=['-v', 'arrow'],
            workdir='projects/arrow',
            name='PyTest Arrow utilities'
        ),
        ShellCommand(
            command=['flake8'],
            workdir='ursabot',
            name='Flake8 Ursabot'
        ),
        ShellCommand(
            command=['flake8'],
            workdir='projects/arrow',
            name='Flake8 Arrow'
        ),
        ShellCommand(
            command=['ursabot'],
            args=['-v', 'checkconfig'],
            workdir='projects/ursabot',
            name='Checkconfig Ursabot'
        ),
        ShellCommand(
            command=['ursabot'],
            args=['-v', 'checkconfig'],
            workdir='projects/arrow',
            name='Checkconfig Arrow'
        ),
        Mkdir(
            dir='/root/.ursalabs-pass',
            name='Create directory for password-store'
        ),
        ShellCommand(
            command=['ursabot'],
            args=['-v', 'checkconfig'],
            name='Checkconfig Both',
            workdir='.'
        )
    ]
    image_filter = where(tag='worker')


builders = UrsabotTest.combine_with(workers, images)

################################ SCHEDULERS ###################################
# Configure the Schedulers, which decide how to react to incoming changes.
# For more see http://docs.buildbot.net/latest/full.html#scheduling-builds

schedulers = [
    AnyBranchScheduler(
        name='Ursabot',
        change_filter=ChangeFilter(
            project=project
        ),
        treeStableTimer=None,
        builders=builders
    ),
    ForceScheduler(
        name='UrsabotForce',
        project=project,
        repository=repo,
        builders=builders
    )
]

################################ REPORTERS ####################################
# There are multiple ways to present build status to various places e.g.
# to github as status push, reviews and/or comments.

if with_reporters:
    reporters = [
        GitHubStatusPush(
            name='UrsabotStatusPush',
            tokens=status_reporter_tokens,
            builders=builders,
            debug=False,
            verbose=True,
            verify=True
        )
    ]
else:
    reporters = []

################################## POLLERS ####################################
# Git and Pull request pollers are required only if no hooks are specified.

if with_pollers:
    pollers = [
        GitPoller(
            project=project,
            repourl=repo,
            branch='master',
            pollInterval=180
        ),
        GitHubPullrequestPoller(
            project=project,
            branches=['master'],
            pollInterval=180,
            magic_link=True,
            token=poller_token
        )
    ]
else:
    pollers = []

################################ PROJECT CONFIG ###############################
# ProjectConfig is a thin layer around the project specific components.
# It lets other buildmaster configurations to reuse existing configurations,
# and it also makes possible to maintain the project relevant buildbot code
# in the project's own codebase.

ursabot = ProjectConfig(
    name=project,
    repo=repo,
    images=images,
    workers=workers,
    builders=builders,
    schedulers=schedulers,
    reporters=reporters
)

# MasterConfig is the object that the ursabot pays attention to.
# - `ursabot checkconfig` loads and validates it without actually
#   running the services
# - `ursabot start|stop|restart` also loads this dictionary, indirectly
#   through buildbot.tac

master = MasterConfig(
    # The 'title' string will appear at the top of this buildbot installation's
    # home pages (linked to the 'titleURL').
    title='Ursabot Testing',
    # The 'buildbotURL' string should point to the location where the
    # buildbot's internal web server is visible. This typically uses the port
    # number set in the 'webui_port' entry below, but with an
    # externally-visible host name which the buildbot cannot figure out without
    # some help.
    url='http://localhost:8100/',
    projects=[
        ursabot
    ]
)
